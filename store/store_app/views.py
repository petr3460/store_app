from django.shortcuts import renderfrom . import models as my_modelsfrom django.http import JsonResponsefrom django.views.decorators.csrf import csrf_exemptfrom django.views.decorators.http import require_POSTfrom .forms import *@csrf_exemptdef home(request):    context = {        'ProductForm': ProductForm,        'CarForm': CarForm,        'StoreForm': StoreForm,        'ShippingForm': ShippingForm,        'ConsignmentForm': ConsignmentForm,        'ShippingConsForm': ShippingConsForm,        'StorageConsForm': StorageConsForm,        'BidForm': BidForm,        'UtilShippingForm': UtilShippingForm,    }    return render(request, 'index.html', context=context)@csrf_exempt@require_POSTdef create_object(request, class_name):    try:        class_def = getattr(my_models, class_name)        class_obj = class_def(**request.POST.dict())        obj_id = class_obj.save()        message = 'Объект класса {} успешно создан с id {}'.format(class_name, obj_id)    except Exception as e:        message = str(e)    return render(request, 'create_redirect.html', {'message':message})@csrf_exemptdef shippings(request):    if request.method == 'GET':        shippings = Shipping.all()        context = {            'shippings': [                {                    'id': shipping.id,                    'source': Store.get(shipping.source_id).name,                    'destination': Store.get(shipping.destination_id).name,                    'in_process': shipping.in_process,                    'finished': shipping.finished                } for shipping in shippings            ]        }        util_shippings = UtilShipping.all()        context['util_shippings'] = [            {                'id': util.id,                'store': Store.get(util.store_id).name,                'finished': util.finished            } for util in util_shippings        ]        return render(request, 'shippings.html', context)    elif request.POST.get('destination') == 'util':        util_shipping_id = request.POST.get('util_shipping')        util_shipping = UtilShipping.get(util_shipping_id)        new_status = request.POST.get('util_status')        if new_status == 'finished' and not util_shipping.finished:            util_shipping.finished = True            util_shipping.save()            response_message = 'Перевозка завершена..'        else:            response_message = 'Ошибка при изменении статуса перевозки'        return JsonResponse({'message': response_message})    else:        shipping_id = request.POST.get('shipping')        shipping = Shipping.get(shipping_id)        new_status = request.POST.get('status')        if new_status == 'in_process' and not shipping.in_process and not shipping.finished:            shipping.in_process = True            shipping.save()            response_message = 'Перевозка начала выполнение..'        elif new_status == 'finished' and shipping.in_process and not shipping.finished:            shipping.finished = True            shipping.save()            response_message = 'Перевозка завершена..'        else:            response_message = 'Ошибка при изменении статуса перевозки'        return JsonResponse({'message': response_message})@csrf_exemptdef products_in_store(request):    if request.method == 'POST':        store_id = request.POST.get('store')        cursor = connection.cursor()        query = '''SELECT *                     FROM store_app_storagecons                     WHERE store_id = {0};                  '''.format(store_id)        cursor.execute(query)        storage_cons = []        for row in cursor.fetchall():            s = StorageCons(*row)            storage_cons.append(s)        if not storage_cons:            return JsonResponse({'message': 'склад пуст'})        consignments = [Consignment.get(i.consignment_id) for i in storage_cons]        response = {            'products': [                {                    'name': Product.get(cons.product_id).name,                    'quantity': cons.quantity,                    'date': cons.manufacture_date.ctime(),                    'price': cons.cost if not cons.expired else 0,                    'total': int(cons.quantity) * int(cons.cost) if not cons.expired else 0                } for cons in consignments            ]        }        response['total'] = sum([p['total'] for p in response['products']])        return JsonResponse(response)    else:        stores = Store.all()        context = {            'stores': [                {                    'id': store.id,                    'name': store.name                } for store in stores            ]        }        return render(request, 'products_in_store.html', context)